{"remainingRequest":"/Users/wangyanxiang/Desktop/vue/ptt/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wangyanxiang/Desktop/vue/ptt/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangyanxiang/Desktop/vue/ptt/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangyanxiang/Desktop/vue/ptt/src/components/test.vue?vue&type=template&id=e43c18bc&scoped=true&","dependencies":[{"path":"/Users/wangyanxiang/Desktop/vue/ptt/src/components/test.vue","mtime":1605531301702},{"path":"/Users/wangyanxiang/Desktop/vue/ptt/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangyanxiang/Desktop/vue/ptt/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/wangyanxiang/Desktop/vue/ptt/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangyanxiang/Desktop/vue/ptt/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}